//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SonarQube.Bootstrapper {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SonarQube.Bootstrapper.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SonarQube Scanner for MSBuild.
        /// </summary>
        public static string AssemblyDescription {
            get {
                return ResourceManager.GetString("AssemblyDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to begin - perform pre-MSBuild analysis steps.
        /// </summary>
        public static string CmdLine_ArgDescription_Begin {
            get {
                return ResourceManager.GetString("CmdLine_ArgDescription_Begin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to end - perform post-MSBuild/post-test steps.
        /// </summary>
        public static string CmdLine_ArgDescription_End {
            get {
                return ResourceManager.GetString("CmdLine_ArgDescription_End", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SonarQube URL must be supplied. The URL can be specified in a settings file or on the command line (e.g. using /d:sonar.host.url=http://myserver:9000)..
        /// </summary>
        public static string ERROR_Args_UrlRequired {
            get {
                return ResourceManager.GetString("ERROR_Args_UrlRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid command line parameters. Please specify either &apos;begin&apos; or &apos;end&apos;, not both..
        /// </summary>
        public static string ERROR_CmdLine_BothBeginAndEndSupplied {
            get {
                return ResourceManager.GetString("ERROR_CmdLine_BothBeginAndEndSupplied", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SonarQube analysis could not be completed because the analysis configuration file could not be found: {0}..
        /// </summary>
        public static string ERROR_ConfigFileNotFound {
            get {
                return ResourceManager.GetString("ERROR_ConfigFileNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} failed. Exit code: {1}.
        /// </summary>
        public static string ERROR_ProcessingFailed {
            get {
                return ResourceManager.GetString("ERROR_ProcessingFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Temporary analysis directory (usually .sonarqube) doesn&apos;t exist. The &quot;begin&quot; step was probably not executed..
        /// </summary>
        public static string ERROR_TempDirDoesNotExist {
            get {
                return ResourceManager.GetString("ERROR_TempDirDoesNotExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The C# plugin installed on the SonarQube server is not compatible with the SonarQube analysis agent (i.e. the MSBuild.SonarQube.Scanner.exe, or the build automation task). Either check the compatibility matrix or get the latest versions for both..
        /// </summary>
        public static string ERROR_VersionMismatch {
            get {
                return ResourceManager.GetString("ERROR_VersionMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Extracting files to {0}....
        /// </summary>
        public static string MSG_ExtractingFiles {
            get {
                return ResourceManager.GetString("MSG_ExtractingFiles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Preparing working directories....
        /// </summary>
        public static string MSG_PreparingDirectories {
            get {
                return ResourceManager.GetString("MSG_PreparingDirectories", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} started..
        /// </summary>
        public static string MSG_ProcessingStarted {
            get {
                return ResourceManager.GetString("MSG_ProcessingStarted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} succeeded..
        /// </summary>
        public static string MSG_ProcessingSucceeded {
            get {
                return ResourceManager.GetString("MSG_ProcessingSucceeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SonarQube server URL: {0}.
        /// </summary>
        public static string MSG_ServerUrl {
            get {
                return ResourceManager.GetString("MSG_ServerUrl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using environment variable &apos;{0}&apos;, value &apos;{1}&apos;.
        /// </summary>
        public static string MSG_UsingBuildEnvironmentVariable {
            get {
                return ResourceManager.GetString("MSG_UsingBuildEnvironmentVariable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using environment variables to determine the download directory....
        /// </summary>
        public static string MSG_UsingEnvVarToGetDirectory {
            get {
                return ResourceManager.GetString("MSG_UsingEnvVarToGetDirectory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Post-processing.
        /// </summary>
        public static string PhaseLabel_PostProcessing {
            get {
                return ResourceManager.GetString("PhaseLabel_PostProcessing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pre-processing.
        /// </summary>
        public static string PhaseLabel_PreProcessing {
            get {
                return ResourceManager.GetString("PhaseLabel_PreProcessing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please specify the command &apos;begin&apos; or &apos;end&apos; to indicate whether pre- or post-processing is required. These parameters will become mandatory in a later release..
        /// </summary>
        public static string WARN_CmdLine_v09_Compat {
            get {
                return ResourceManager.GetString("WARN_CmdLine_v09_Compat", resourceCulture);
            }
        }
    }
}
