<Project Sdk="Microsoft.NET.Sdk">
  <!--
  This project packages the assemblies and targets files that form the "sonarqube.msbuild.runner" that needs to be copied to the XAML build agents
  -->
  <PropertyGroup>
    <TargetFramework>net461</TargetFramework>
    <SonarQubeExclude>True</SonarQubeExclude>
    <ScannerCliVersion Condition=" $(ScannerCliVersion) == '' ">3.0.3.778</ScannerCliVersion>
    <ScannerCliArtifact>sonar-scanner-cli-$(ScannerCliVersion).zip</ScannerCliArtifact>
    <ScannerCliDirectory>sonar-scanner-$(ScannerCliVersion)</ScannerCliDirectory>
    <MavenCentralUrl>https://repox.sonarsource.com/sonarsource-public-releases/org/sonarsource/scanner/cli/sonar-scanner-cli/$(ScannerCliVersion)/$(ScannerCliArtifact)</MavenCentralUrl>
    <SourcesRoot>$(MSBuildThisFileFullPath)\..\..</SourcesRoot>
    <DestinationDir>$(SourcesRoot)\..\DeploymentArtifacts\BuildAgentPayload\$(Configuration)\</DestinationDir>
    <WorkDestinationDir>$(DestinationDir)Work</WorkDestinationDir>
    <ClassicDestinationDir>$(DestinationDir)Work\$(ScannerNetFxVersion)</ClassicDestinationDir>
    <DotnetDestinationDir>$(DestinationDir)Work\$(ScannerNetCoreAppVersion)</DotnetDestinationDir>

    <!-- OutputPath is required by the Clean and Rebuild tasks -->
    <OutputPath>bin\$(Configuration)\</OutputPath>
  </PropertyGroup>

  <!-- Target files. The same files are used in both classic framework and dotnet scanners. -->
  <ItemGroup>
    <TargetFiles Include="$(SourcesRoot)\SonarScanner.MSBuild.Tasks\bin\$(Configuration)\$(ScannerNetStandardVersion)\Targets\SonarQube.Integration.targets" />
    <TargetFiles Include="$(SourcesRoot)\SonarScanner.MSBuild.Tasks\bin\$(Configuration)\$(ScannerNetStandardVersion)\Targets\SonarQube.Integration.ImportBefore.targets" />
  </ItemGroup>

  <!-- Binaries for dotnet framework scanner -->
  <ItemGroup>
    <ClassicScannerFiles Include="$(SourcesRoot)\SonarScanner.MSBuild\bin\$(Configuration)\$(ScannerNetFxVersion)\SonarQube.Analysis.xml" />
    <ClassicScannerFiles Include="$(SourcesRoot)\SonarScanner.MSBuild.Common\bin\$(Configuration)\$(ScannerNetFxVersion)\SonarScanner.MSBuild.Common.dll" />
    <ClassicScannerFiles Include="$(SourcesRoot)\SonarScanner.MSBuild.PreProcessor\bin\$(Configuration)\$(ScannerNetFxVersion)\SonarScanner.MSBuild.PreProcessor.dll" />
    <ClassicScannerFiles Include="$(SourcesRoot)\SonarScanner.MSBuild.PostProcessor\bin\$(Configuration)\$(ScannerNetFxVersion)\SonarScanner.MSBuild.PostProcessor.dll" />
    <ClassicScannerFiles Include="$(SourcesRoot)\SonarScanner.MSBuild.TFS\bin\$(Configuration)\$(ScannerNetFxVersion)\SonarScanner.MSBuild.TFS.dll" />
    <ClassicScannerFiles Include="$(SourcesRoot)\SonarScanner.MSBuild.Tasks\bin\$(Configuration)\$(ScannerNetFxVersion)\SonarScanner.MSBuild.Tasks.dll" />
    <ClassicScannerFiles Include="$(SourcesRoot)\SonarScanner.MSBuild.Shim\bin\$(Configuration)\$(ScannerNetFxVersion)\SonarScanner.MSBuild.Shim.dll" />

    <!-- External dependencies -->
    <ClassicScannerFiles Include="$(SourcesRoot)\SonarScanner.MSBuild.PreProcessor\bin\$(Configuration)\$(ScannerNetFxVersion)\Newtonsoft.Json.dll" />
    <ClassicScannerFiles Include="$(SourcesRoot)\SonarScanner.MSBuild.TFS.Classic\bin\$(Configuration)\$(ScannerNetFxVersion)\Microsoft.VisualStudio.Setup.Configuration.Interop.dll" />
    <ClassicScannerFiles Include="$(SourcesRoot)\SonarScanner.MSBuild\bin\$(Configuration)\$(ScannerNetFxVersion)\System.ValueTuple.dll" />

    <!-- .NET Framework entry point-->
    <ClassicScannerFiles Include="$(SourcesRoot)\SonarScanner.MSBuild\bin\$(Configuration)\$(ScannerNetFxVersion)\SonarScanner.MSBuild.exe" />

    <!-- .NET Framework legacy entry points-->
    <ClassicScannerFiles Include="$(SourcesRoot)\SonarQube.Bootstrapper\bin\$(Configuration)\$(ScannerNetFxVersion)\SonarQube.Scanner.MSBuild.exe" />
    <ClassicScannerFiles Include="$(SourcesRoot)\SonarQube.Old.Bootstrapper\bin\$(Configuration)\$(ScannerNetFxVersion)\MSBuild.SonarQube.Runner.exe" />

    <!-- XAML Support (only for "classic" .NET Framework). -->
    <ClassicScannerFiles Include="$(SourcesRoot)\SonarScanner.MSBuild.TFS.Classic\bin\$(Configuration)\$(ScannerNetFxVersion)\SonarScanner.MSBuild.TFS.Classic.dll" />
  </ItemGroup>
  <ItemGroup Condition="$(Configuration) == 'Debug'">
    <ClassicScannerFiles Include="$(SourcesRoot)\SonarScanner.MSBuild\bin\$(Configuration)\$(ScannerNetFxVersion)\SonarScanner.MSBuild.pdb" />
  </ItemGroup>

  <!-- Binaries for dotnet core scanner -->
  <ItemGroup>
    <DotnetScannerFiles Include="$(SourcesRoot)\SonarScanner.MSBuild\bin\$(Configuration)\$(ScannerNetCoreAppVersion)\SonarQube.Analysis.xml" />
    <DotnetScannerFiles Include="$(SourcesRoot)\SonarScanner.MSBuild.Common\bin\$(Configuration)\$(ScannerNetStandardVersion)\SonarScanner.MSBuild.Common.dll" />
    <DotnetScannerFiles Include="$(SourcesRoot)\SonarScanner.MSBuild.PreProcessor\bin\$(Configuration)\$(ScannerNetStandardVersion)\SonarScanner.MSBuild.PreProcessor.dll" />
    <DotnetScannerFiles Include="$(SourcesRoot)\SonarScanner.MSBuild.PostProcessor\bin\$(Configuration)\$(ScannerNetStandardVersion)\SonarScanner.MSBuild.PostProcessor.dll" />
    <DotnetScannerFiles Include="$(SourcesRoot)\SonarScanner.MSBuild.TFS\bin\$(Configuration)\$(ScannerNetStandardVersion)\SonarScanner.MSBuild.TFS.dll" />
    <DotnetScannerFiles Include="$(SourcesRoot)\SonarScanner.MSBuild.Tasks\bin\$(Configuration)\$(ScannerNetStandardVersion)\SonarScanner.MSBuild.Tasks.dll" />
    <DotnetScannerFiles Include="$(SourcesRoot)\SonarScanner.MSBuild.Shim\bin\$(Configuration)\$(ScannerNetStandardVersion)\SonarScanner.MSBuild.Shim.dll" />

    <!-- External dependencies -->
    <DotnetScannerFiles Include="$(SourcesRoot)\SonarScanner.MSBuild.PreProcessor\bin\$(Configuration)\$(ScannerNetStandardVersion)\Newtonsoft.Json.dll" />

    <!-- .NET Core entry points-->
    <DotnetScannerFiles Include="$(SourcesRoot)\SonarScanner.MSBuild\bin\$(Configuration)\$(ScannerNetCoreAppVersion)\SonarScanner.MSBuild.runtimeconfig.json" />
    <DotnetScannerFiles Include="$(SourcesRoot)\SonarScanner.MSBuild\bin\$(Configuration)\$(ScannerNetCoreAppVersion)\SonarScanner.MSBuild.dll" />
  </ItemGroup>
  <ItemGroup Condition="$(Configuration) == 'Debug'">
    <DotnetScannerFiles Include="$(SourcesRoot)\SonarScanner.MSBuild\bin\$(Configuration)\$(ScannerNetCoreAppVersion)\SonarScanner.MSBuild.pdb" />
  </ItemGroup>

  <!-- Reference to dependencies to ensure the build order is correct -->
  <ItemGroup>
    <ProjectReference Include="$(SourcesRoot)\SonarScanner.MSBuild.Common\SonarScanner.MSBuild.Common.csproj" />
    <ProjectReference Include="$(SourcesRoot)\SonarScanner.MSBuild\SonarScanner.MSBuild.csproj" />
    <ProjectReference Include="$(SourcesRoot)\SonarQube.Bootstrapper\SonarQube.Bootstrapper.csproj" />
    <ProjectReference Include="$(SourcesRoot)\SonarScanner.MSBuild.Tasks\SonarScanner.MSBuild.Tasks.csproj" />
    <ProjectReference Include="$(SourcesRoot)\SonarQube.Old.Bootstrapper\SonarQube.Old.Bootstrapper.csproj" />
    <ProjectReference Include="$(SourcesRoot)\SonarScanner.MSBuild.TFS\SonarScanner.MSBuild.TFS.csproj" />
    <ProjectReference Include="$(SourcesRoot)\SonarScanner.MSBuild.TFS.Classic\SonarScanner.MSBuild.TFS.Classic.csproj" />
    <ProjectReference Include="$(SourcesRoot)\SonarScanner.MSBuild.PostProcessor\SonarScanner.MSBuild.PostProcessor.csproj" />
    <ProjectReference Include="$(SourcesRoot)\SonarScanner.MSBuild.PreProcessor\SonarScanner.MSBuild.PreProcessor.csproj" />
    <ProjectReference Include="$(SourcesRoot)\SonarScanner.MSBuild.Shim\SonarScanner.MSBuild.Shim.csproj" />
  </ItemGroup>
  <UsingTask TaskName="DownloadFile" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll">
    <ParameterGroup>
      <Url ParameterType="System.String" Required="true" />
      <File ParameterType="System.String" Required="false" />
      <OutputFolder ParameterType="System.String" Required="false" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.Web" />
      <Code Type="Fragment" Language="cs"><![CDATA[
        using (var client = new System.Net.WebClient())
            { client.DownloadFile(Url, (OutputFolder != null ? OutputFolder + "/" : "") + (File ?? System.IO.Path.GetFileName(new Uri(Url).LocalPath))); }
        ]]></Code>
    </Task>
  </UsingTask>
  <Target Name="CreatePayload" AfterTargets="Build">
    <CallTarget Targets="CleanExistingPayload" />
    <CallTarget Targets="DownloadScannerCli" />
    <CallTarget Targets="UnzipScannerCli" />
    <CallTarget Targets="CopyPayloadFiles" />
    <CallTarget Targets="ZipPayloadFiles" />
  </Target>
  <Target Name="CopyPayloadFiles">
    <Copy SourceFiles="@(ClassicScannerFiles)" DestinationFolder="$(ClassicDestinationDir)\%(RecursiveDir)" />
    <Copy SourceFiles="@(TargetFiles)" DestinationFolder="$(ClassicDestinationDir)\Targets" />

    <Copy SourceFiles="@(DotnetScannerFiles)" DestinationFolder="$(DotnetDestinationDir)\%(RecursiveDir)" ContinueOnError="true" />
    <Copy SourceFiles="@(TargetFiles)" DestinationFolder="$(DotnetDestinationDir)\Targets\" />
  </Target>
  <Target Name="DownloadScannerCli" Condition="!Exists('$(OutputPath)\$(ScannerCliArtifact)')">
    <Message Text="Downloading: $(MavenCentralUrl)" />
    <DownloadFile Url="$(MavenCentralUrl)" OutputFolder="$(OutputPath)" />
  </Target>
  <Target Name="UnzipScannerCli">
    <RemoveDir Directories="$(OutputPath)$(ScannerCliDirectory)" />
    <Exec Command="powershell.exe -executionpolicy bypass -command &quot;Add-Type -assembly system.io.compression.filesystem; [io.compression.zipfile]::ExtractToDirectory('$(OutputPath)$(ScannerCliArtifact)', '$(ClassicDestinationDir)')&quot;" />
    <Exec Command="powershell.exe -executionpolicy bypass -command &quot;Add-Type -assembly system.io.compression.filesystem; [io.compression.zipfile]::ExtractToDirectory('$(OutputPath)$(ScannerCliArtifact)', '$(DotnetDestinationDir)')&quot;" />
  </Target>
  <Target Name="ZipPayloadFiles">
    <Exec Command="powershell.exe -executionpolicy bypass -command &quot;Add-Type -assembly system.io.compression.filesystem; Add-Type -assembly system.text.encoding; Add-Type -TypeDefinition 'public class MyEncoder : System.Text.UTF8Encoding { public MyEncoder() : base(true) {} public override byte[] GetBytes(string s) { return base.GetBytes(s.Replace((char) 92, (char) 47)); } }'; $enc = New-Object MyEncoder; [io.compression.zipfile]::CreateFromDirectory('$(ClassicDestinationDir)', '$(DestinationDir)\sonarscanner-msbuild-$(ScannerNetFxVersion).zip',      [io.compression.compressionlevel]::fastest, $false, $enc)&quot;" />
    <Exec Command="powershell.exe -executionpolicy bypass -command &quot;Add-Type -assembly system.io.compression.filesystem; Add-Type -assembly system.text.encoding; Add-Type -TypeDefinition 'public class MyEncoder : System.Text.UTF8Encoding { public MyEncoder() : base(true) {} public override byte[] GetBytes(string s) { return base.GetBytes(s.Replace((char) 92, (char) 47)); } }'; $enc = New-Object MyEncoder; [io.compression.zipfile]::CreateFromDirectory('$(DotnetDestinationDir)',  '$(DestinationDir)\sonarscanner-msbuild-$(ScannerNetCoreAppVersion).zip', [io.compression.compressionlevel]::fastest, $false, $enc)&quot;" />
  </Target>
  <Target Name="CleanExistingPayload" AfterTargets="Clean">
    <RemoveDir Directories="$(DestinationDir)" />
  </Target>
</Project>
