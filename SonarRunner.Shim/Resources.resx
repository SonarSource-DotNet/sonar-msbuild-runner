<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DIAG_CallingSonarRunner" xml:space="preserve">
    <value>Calling the sonar-runner...</value>
  </data>
  <data name="DIAG_FileIsOutsideProjectDirectory" xml:space="preserve">
    <value>File is not under the project directory and cannot currently be analysed by SonarQube. File: {0}, project: {1}</value>
  </data>
  <data name="DIAG_GeneratingProjectProperties" xml:space="preserve">
    <value>Generating SonarQube project properties file to {0}</value>
  </data>
  <data name="DIAG_NoFilesToAnalyze" xml:space="preserve">
    <value>The project does not contain any files that can analyzed by SonarQube. Project file: {0}</value>
  </data>
  <data name="DIAG_ProjectIsExcluded" xml:space="preserve">
    <value>The exclude flag has been set so the project will not be analyzed by SonarQube. Project file: {0}</value>
  </data>
  <data name="DIAG_PropertiesGenerationFailed" xml:space="preserve">
    <value>Generation of the sonar-properties file failed. Unable to complete SonarQube analysis.</value>
  </data>
  <data name="DIAG_SonarRunnerCompleted" xml:space="preserve">
    <value>The sonar-runner has finished</value>
  </data>
  <data name="DIAG_WritingSummary" xml:space="preserve">
    <value>Writing processing summary to {0}</value>
  </data>
  <data name="ERR_ErrorLoadingConfigFile" xml:space="preserve">
    <value>An error occurred loading the analysis config file. Please check that it is a valid file and try again. Error: {0}</value>
  </data>
  <data name="ERR_InvalidAnalysisConfigFilePath" xml:space="preserve">
    <value>The specified analysis config file does not exist: {0}</value>
  </data>
  <data name="ERR_InvalidCommandLineArgs" xml:space="preserve">
    <value>Expected to be called with one argument: the full path to the analysis config file</value>
  </data>
  <data name="ERR_NoProjectInfoFilesFound" xml:space="preserve">
    <value>No ProjectInfo.xml files were found. Check that the analysis targets are referenced by the MSBuild projects being built.</value>
  </data>
  <data name="ERR_NoValidProjectInfoFiles" xml:space="preserve">
    <value>No valid projectInfo.xml were found. SonarQube analysis will not be performed.</value>
  </data>
  <data name="ERR_SonarRunnerExecutionFailed" xml:space="preserve">
    <value>The sonar-runner did not complete successfully</value>
  </data>
  <data name="INFO_SonarRunnerOptsDefaultUsed" xml:space="preserve">
    <value>{0} is not configured. Setting it to the default value of {1}</value>
  </data>
  <data name="INFO_SonarRunOptsAlreadySet" xml:space="preserve">
    <value>{0} is already set. Value: {1}</value>
  </data>
  <data name="REPORT_ExcludedProjectsTitle" xml:space="preserve">
    <value>Excluded projects</value>
  </data>
  <data name="REPORT_InvalidProjectsTitle" xml:space="preserve">
    <value>Invalid projects</value>
  </data>
  <data name="REPORT_NoProjectsOfType" xml:space="preserve">
    <value>{none}</value>
  </data>
  <data name="REPORT_ProductProjectsTitle" xml:space="preserve">
    <value>Product projects</value>
  </data>
  <data name="REPORT_SkippedProjectsTitle" xml:space="preserve">
    <value>Skipped projects</value>
  </data>
  <data name="REPORT_TestProjectsTitle" xml:space="preserve">
    <value>Test projects</value>
  </data>
  <data name="WARN_CodeCoverageReportNotFound" xml:space="preserve">
    <value>Code coverage report does not exist at the specified location. Path: {0}</value>
  </data>
  <data name="WARN_DuplicateProjectGuid" xml:space="preserve">
    <value>Duplicate project GUID: "{0}". Check that the project is only being built for a single platform/configuration and that that the project guid is unique. The project will not be analyzed by SonarQube. Project file: {1}</value>
  </data>
  <data name="WARN_FileDoesNotExist" xml:space="preserve">
    <value>File referenced in the project does not exist: {0}</value>
  </data>
  <data name="WARN_FxCopReportNotFound" xml:space="preserve">
    <value>FxCop analysis report does not exist at the specified location. Path: {0}</value>
  </data>
  <data name="WARN_InvalidProjectGuid" xml:space="preserve">
    <value>The project has an invalid GUID "{0}". The project will not be analyzed by SonarQube. Project file: {1}</value>
  </data>
  <data name="WARN_SonarRunnerHomeIsSet" xml:space="preserve">
    <value>The enviroment variable SONAR_RUNNER_HOME is set and may cause errors. Please delete it if the analysis fails. </value>
  </data>
</root>